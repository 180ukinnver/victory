{"description":"","props":{"data":{"type":{"name":"arrayOf","value":{"name":"shape","value":{"x":{"name":"union","value":[{"name":"string"},{"name":"number"}],"required":false},"y":{"name":"number","required":false}}}},"required":false,"description":"Objects in the data array must be of the form { x: <x-val>, y: <y-val> }, where <x-val>\nis the slice label (string or number), and <y-val> is the corresponding number\nused to calculate arc length as a proportion of the pie's circumference.\nIf the data prop is omitted, the pie will render sample data.","defaultValue":{"value":"[\n  { x: \"A\", y: 1 },\n  { x: \"B\", y: 2 },\n  { x: \"C\", y: 3 },\n  { x: \"D\", y: 1 },\n  { x: \"E\", y: 2 }\n]","computed":false}},"style":{"type":{"name":"object"},"required":false,"description":"The style prop specifies styles for your pie. VictoryPie relies on Radium,\nso valid Radium style objects should work for this prop, however properties like\nheight, width, padding and margin are used to calculate the radius of the pi, and need to be\nexpressed as a number of pixels\n@example {width: 500, height: 300, label: {fill: \"black\", fontSize: 10}}"},"startAngle":{"type":{"name":"number"},"required":false,"description":"The overall start angle of the pie in degrees. This prop is used in conjunction with\n`endAngle` to create a pie that spans only a segment of a circle.","defaultValue":{"value":"0","computed":false}},"endAngle":{"type":{"name":"number"},"required":false,"description":"The overall end angle of the pie in degrees. This prop is used in conjunction with\n`startAngle` to create a pie that spans only a segment of a circle.","defaultValue":{"value":"360","computed":false}},"innerRadius":{"type":{"name":"number"},"required":false,"description":"When creating a donut chart, this prop determines the number of pixels between\nthe center of the chart and the inner edge of a donut. When this prop is set to zero\na regular pie chart is rendered.","defaultValue":{"value":"0","computed":false}},"padAngle":{"type":{"name":"number"},"required":false,"description":"The padAngle prop determines the amount of separation between adjacent data slices\nin number of degrees","defaultValue":{"value":"0","computed":false}},"sliceColors":{"type":{"name":"arrayOf","value":{"name":"string"}},"required":false,"description":"The sliceColors prop defines an array of colors to use for distinguishing data\nsegments in a pie chart. If the data array is longer than the sliceColors array,\ncolors will be reused.","defaultValue":{"value":"[\n  \"#75C776\",\n  \"#39B6C5\",\n  \"#78CCC4\",\n  \"#62C3A4\",\n  \"#64A8D1\",\n  \"#8C95C8\",\n  \"#3BAF74\"\n]","computed":false}},"sort":{"type":{"name":"union","value":[{"name":"enum","value":[{"value":"\"ascending\"","computed":false},{"value":"\"descending\"","computed":false}]},{"name":"func"}]},"required":false,"description":"The sort prop determines how to order data. This prop can be given as \"ascending\"\nor \"descending\", or as a custom comparator function","defaultValue":{"value":"null","computed":false}},"animate":{"type":{"name":"object"},"required":false,"description":"The animate prop specifies props for victory-animation to use. If this prop is\nnot given, the pie chart will not tween between changing data / style props.\nLarge datasets might animate slowly due to the inherent limits of svg rendering.\n@examples {line: {delay: 5, velocity: 10, onEnd: () => alert(\"woo!\")}}"},"standalone":{"type":{"name":"bool"},"required":false,"description":"The standalone prop determines whether VictoryPie should render as a standalone\nsvg, or in a g tag to be included in an svg","defaultValue":{"value":"true","computed":false}}}}