{"description":"","props":{"chartType":{"type":{"name":"enum","value":[{"value":"\"line\"","computed":false},{"value":"\"scatter\"","computed":false},{"value":"\"bar\"","computed":false},{"value":"\"stackedBar\"","computed":false}]},"required":false,"description":"The chartType prop specifies how data should be plotted.","defaultValue":{"value":"\"line\"","computed":false}},"data":{"type":{"name":"union","value":[{"name":"arrayOf","value":{"name":"shape","value":{"x":{"name":"any","required":false},"y":{"name":"any","required":false}}}},{"name":"arrayOf","value":{"name":"arrayOf","value":{"name":"shape","value":{"x":{"name":"any","required":false},"y":{"name":"any","required":false}}}}}]},"required":false,"description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point should be an object with x and y properties. Other properties may\nbe added to the data point object, such as label, color, size, symbol or opacity.\nThese properties will be interpreted and applied to the individual data point\nin chart types that support them.\n@exampes [\n  {x: new Date(1982, 1, 1), y: 125, color: \"red\", symbol: \"plus\"},\n  {x: new Date(1987, 1, 1), y: 257, color: \"blue\", symbol: \"star\"},\n  {x: new Date(1993, 1, 1), y: 345, color: \"green\", symbol: \"circle\"},\n],\n[\n  [{x: 5, y: 3}, {x: 4, y: 2}, {x: 3, y: 1}],\n  [{x: 1, y: 2}, {x: 2, y: 3}, {x: 3, y: 4}],\n  [{x: 1, y: 2}, {x: 2, y: 2}, {x: 3, y: 2}]\n]"},"dataAttributes":{"type":{"name":"union","value":[{"name":"object"},{"name":"arrayOf","value":{"name":"object"}}]},"required":false,"description":"The dataAttributes prop describes how a data set should be plotted and styled.\nThis prop can be given as an object, or an array of objects. If this prop is\ngiven as an array of objects, the properties of each object in the array will\nbe applied to the data points in the corresponding array of the data prop.\n@exampes {type: \"scatter\", symbol: \"square\", color: \"blue\"},\n[{type: \"line\", stroke: \"green\", width: 3}, {type: \"bar\", color: \"orange\"}]"},"x":{"type":{"name":"array"},"required":false,"description":"The x props provides another way to supply data for chart to plot. This prop can be given\nas an array of values or an array of arrays, and it will be plotted against whatever\ny prop is provided. If no props are provided for y, the values in x will be plotted\nas the identity function (x) => x.\n@examples [\"apples\", \"oranges\", \"bananas\"], [[1, 2, 3], [2, 3, 4], [4, 5, 6]]"},"y":{"type":{"name":"union","value":[{"name":"array"},{"name":"func"}]},"required":false,"description":"The y props provides another way to supply data for chart to plot. This prop can be given\nas a function of x, or an array of values, or an array of functions and / or values.\nif x props are given, they will be used in plotting (x, y) data points. If x props are not\nprovided, a set of x values evenly spaced across the x domain will be calculated, and used\nfor plotting data points.\n@examples (x) => x + 5, [1, 2, 3], [(x) => x, [2, 3, 4], (x) => Math.sin(x)]"},"yAttributes":{"type":{"name":"union","value":[{"name":"object"},{"name":"arrayOf","value":{"name":"object"}}]},"required":false,"description":"The yAttributes prop describes how a data set should be plotted and styled.\nThis prop behaves identically to the dataAttributes prop, but is applied to\nany data provided via the y prop\n@exampes {type: \"scatter\", symbol: \"square\", color: \"blue\"},\n[{type: \"line\", stroke: \"green\", width: 3}, {type: \"bar\", color: \"orange\"}]"},"samples":{"type":{"name":"number"},"required":false,"description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead.","defaultValue":{"value":"50","computed":false}},"interpolation":{"type":{"name":"enum","value":[{"value":"\"linear\"","computed":false},{"value":"\"linear-closed\"","computed":false},{"value":"\"step\"","computed":false},{"value":"\"step-before\"","computed":false},{"value":"\"step-after\"","computed":false},{"value":"\"basis\"","computed":false},{"value":"\"basis-open\"","computed":false},{"value":"\"basis-closed\"","computed":false},{"value":"\"bundle\"","computed":false},{"value":"\"cardinal\"","computed":false},{"value":"\"cardinal-open\"","computed":false},{"value":"\"cardinal-closed\"","computed":false},{"value":"\"monotone\"","computed":false}]},"required":false,"description":"The interpolation prop determines how data points should be connected\nwhen plotting a line","defaultValue":{"value":"\"linear\"","computed":false}},"scale":{"type":{"name":"union","value":[{"name":"func"},{"name":"shape","value":{"x":{"name":"func","required":false},"y":{"name":"func","required":false}}}]},"required":false,"description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a function, or as an object that specifies separate functions for x and y.\n@exampes d3.time.scale(), {x: d3.scale.linear(), y: d3.scale.log()}","defaultValue":{"value":"d3.scale.linear()","computed":true}},"domain":{"type":{"name":"union","value":[{"name":"array"},{"name":"shape","value":{"x":{"name":"array","required":false},"y":{"name":"array","required":false}}}]},"required":false,"description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n@exampes [-1, 1], {x: [0, 100], y: [0, 1]}"},"range":{"type":{"name":"union","value":[{"name":"array"},{"name":"shape","value":{"x":{"name":"arrayOf","value":{"name":"number"},"required":false},"y":{"name":"arrayOf","value":{"name":"number"},"required":false}}}]},"required":false,"description":"The range prop describes the range of pixels your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a range will be calculated based on the height,\nwidth, and margin provided in the style prop, or in default styles. It is usually\na good idea to let the chart component calculate its own range.\n@exampes [0, 500], {x: [0, 500], y: [500, 300]}"},"standalone":{"type":{"name":"bool"},"required":false,"description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose VictoryChart with other components within an enclosing <svg> tag.","defaultValue":{"value":"true","computed":false}},"style":{"type":{"name":"object"},"required":false,"description":"The style prop specifies styles for your chart. Victory Chart relies on Radium,\nso valid Radium style objects should work for this prop, however height, width, and margin\nare used to calculate range, and need to be expressed as a number of pixels\n@examples {width: 500, height: 300, axis: {x: {...}, y: {...}},\nline: {data: {...}, labels: {...}}, scatter: {...}, bar: {...}}"},"axisLabels":{"type":{"name":"object"},"required":false,"description":"The axisLabels prop specifies the labels for your axes. It should be given as\nan object with x and y properties.\n@examples {x: \"years\", y: \"cats\"}"},"axisOrientation":{"type":{"name":"shape","value":{"x":{"name":"enum","value":[{"value":"\"top\"","computed":false},{"value":"\"bottom\"","computed":false}],"required":false},"y":{"name":"enum","value":[{"value":"\"left\"","computed":false},{"value":"\"right\"","computed":false}],"required":false}}},"required":false,"description":"The axisOrientation prop specifies the layout of your axes. It should be given as\nan object with x and y properties. Currently, Victory Chart only suppotys vertical y axes\nand horizontal x axes\n@examples {x: \"bottom\", y: \"right\"}","defaultValue":{"value":"{\n  x: \"bottom\",\n  y: \"left\"\n}","computed":false}},"tickValues":{"type":{"name":"shape","value":{"x":{"name":"arrayOf","value":{"name":"any"},"required":false},"y":{"name":"arrayOf","value":{"name":"any"},"required":false}}},"required":false,"description":"The tickValues prop explicity specifies which ticks values to draw on each axis.\nThis prop should be given as an object with arrays specified for x and y\n@examples {x: [\"apples\", \"bananas\", \"oranges\"] y: [2, 4, 6, 8]}"},"tickFormat":{"type":{"name":"shape","value":{"x":{"name":"union","value":[{"name":"func"},{"name":"array"}],"required":false},"y":{"name":"union","value":[{"name":"func"},{"name":"array"}],"required":false}}},"required":false,"description":"The tickFormat prop specifies how tick values should be expressed visually.\nThis prop should be given as an object with functions or arrays of display\nvalues specified for x and y\n@examples {x: d3.time.format(\"%Y\"), y: (x) => x.toPrecision(2)}, {\nx: [\"dogs\", \"cats\", \"birds\"]}"},"tickCount":{"type":{"name":"shape","value":{"x":{"name":"number","required":false},"y":{"name":"number","required":false}}},"required":false,"description":"The tickCount prop specifies how many ticks should be drawn on each axis if\nticksValues are not explicitly provided. This prop shouls be given as an object\nwith numbers specified for x and y\n@examples {x: 7, y: 5}","defaultValue":{"value":"{\n  x: 7,\n  y: 5\n}","computed":false}},"domainPadding":{"type":{"name":"shape","value":{"x":{"name":"number","required":false},"y":{"name":"number","required":false}}},"required":false,"description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y."},"categories":{"type":{"name":"array"},"required":false,"description":"The categories prop specifies the categories for a bar chart. This prop should\nbe given as an array of string values, numeric values, or arrays. When this prop is\ngiven as an array of arrays, the minimum and maximum values of the arrays define range bands,\nallowing numeric data to be grouped into segments.\n@examples [\"dogs\", \"cats\", \"mice\"], [[0, 5], [5, 10], [10, 15]]"},"categoryLabels":{"type":{"name":"array"},"required":false,"description":"The categories prop specifies category labels for a bar chart. This prop should be\ngiven as an array of values. The number of elements in the label array should be\nequal to number of elements in the categories array, or if categories is not defined,\nto the number of unique x values in your data. Use this prop to add labels to\nstacked bars and groups of bars. Adding labels to individual bars can be accomplished\nby adding a label property directly to the data object.\n@examples: [\"spring\", \"summer\", \"fall\", \"winter\"]"},"animate":{"type":{"name":"union","value":[{"name":"object"},{"name":"shape","value":{"line":{"name":"object","required":false},"scatter":{"name":"object","required":false},"axis":{"name":"object","required":false},"bar":{"name":"object","required":false}}}]},"required":false,"description":"The animate prop specifies props for victory-animation to use. It this prop is\nnot given, the chart will not tween between changing data / style props.\nLarge datasets might animate slowly due to the inherent limits of svg rendering.\n@examples {line: {delay: 5, velocity: 10, onEnd: () => alert(\"woo!\")}}"}}}